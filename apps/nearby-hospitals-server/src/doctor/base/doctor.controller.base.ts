/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DoctorService } from "../doctor.service";
import { DoctorCreateInput } from "./DoctorCreateInput";
import { Doctor } from "./Doctor";
import { DoctorFindManyArgs } from "./DoctorFindManyArgs";
import { DoctorWhereUniqueInput } from "./DoctorWhereUniqueInput";
import { DoctorUpdateInput } from "./DoctorUpdateInput";
import { DepartmentFindManyArgs } from "../../department/base/DepartmentFindManyArgs";
import { Department } from "../../department/base/Department";
import { DepartmentWhereUniqueInput } from "../../department/base/DepartmentWhereUniqueInput";

export class DoctorControllerBase {
  constructor(protected readonly service: DoctorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Doctor })
  async createDoctor(@common.Body() data: DoctorCreateInput): Promise<Doctor> {
    return await this.service.createDoctor({
      data: {
        ...data,

        department: data.department
          ? {
              connect: data.department,
            }
          : undefined,

        patient: data.patient
          ? {
              connect: data.patient,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,

        patient: {
          select: {
            id: true,
          },
        },

        specialization: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Doctor] })
  @ApiNestedQuery(DoctorFindManyArgs)
  async doctors(@common.Req() request: Request): Promise<Doctor[]> {
    const args = plainToClass(DoctorFindManyArgs, request.query);
    return this.service.doctors({
      ...args,
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,

        patient: {
          select: {
            id: true,
          },
        },

        specialization: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Doctor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async doctor(
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<Doctor | null> {
    const result = await this.service.doctor({
      where: params,
      select: {
        createdAt: true,

        department: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,

        patient: {
          select: {
            id: true,
          },
        },

        specialization: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Doctor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDoctor(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() data: DoctorUpdateInput
  ): Promise<Doctor | null> {
    try {
      return await this.service.updateDoctor({
        where: params,
        data: {
          ...data,

          department: data.department
            ? {
                connect: data.department,
              }
            : undefined,

          patient: data.patient
            ? {
                connect: data.patient,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,

          patient: {
            select: {
              id: true,
            },
          },

          specialization: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Doctor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDoctor(
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<Doctor | null> {
    try {
      return await this.service.deleteDoctor({
        where: params,
        select: {
          createdAt: true,

          department: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,

          patient: {
            select: {
              id: true,
            },
          },

          specialization: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/departments")
  @ApiNestedQuery(DepartmentFindManyArgs)
  async findDepartments(
    @common.Req() request: Request,
    @common.Param() params: DoctorWhereUniqueInput
  ): Promise<Department[]> {
    const query = plainToClass(DepartmentFindManyArgs, request.query);
    const results = await this.service.findDepartments(params.id, {
      ...query,
      select: {
        createdAt: true,

        doctor: {
          select: {
            id: true,
          },
        },

        hospital: {
          select: {
            id: true,
          },
        },

        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/departments")
  async connectDepartments(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: DepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      departments: {
        connect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/departments")
  async updateDepartments(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: DepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      departments: {
        set: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/departments")
  async disconnectDepartments(
    @common.Param() params: DoctorWhereUniqueInput,
    @common.Body() body: DepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      departments: {
        disconnect: body,
      },
    };
    await this.service.updateDoctor({
      where: params,
      data,
      select: { id: true },
    });
  }
}
