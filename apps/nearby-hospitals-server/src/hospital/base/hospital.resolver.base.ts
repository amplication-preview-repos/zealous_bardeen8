/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Hospital } from "./Hospital";
import { HospitalCountArgs } from "./HospitalCountArgs";
import { HospitalFindManyArgs } from "./HospitalFindManyArgs";
import { HospitalFindUniqueArgs } from "./HospitalFindUniqueArgs";
import { CreateHospitalArgs } from "./CreateHospitalArgs";
import { UpdateHospitalArgs } from "./UpdateHospitalArgs";
import { DeleteHospitalArgs } from "./DeleteHospitalArgs";
import { DepartmentFindManyArgs } from "../../department/base/DepartmentFindManyArgs";
import { Department } from "../../department/base/Department";
import { HospitalService } from "../hospital.service";
@graphql.Resolver(() => Hospital)
export class HospitalResolverBase {
  constructor(protected readonly service: HospitalService) {}

  async _hospitalsMeta(
    @graphql.Args() args: HospitalCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Hospital])
  async hospitals(
    @graphql.Args() args: HospitalFindManyArgs
  ): Promise<Hospital[]> {
    return this.service.hospitals(args);
  }

  @graphql.Query(() => Hospital, { nullable: true })
  async hospital(
    @graphql.Args() args: HospitalFindUniqueArgs
  ): Promise<Hospital | null> {
    const result = await this.service.hospital(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Hospital)
  async createHospital(
    @graphql.Args() args: CreateHospitalArgs
  ): Promise<Hospital> {
    return await this.service.createHospital({
      ...args,
      data: {
        ...args.data,

        department: args.data.department
          ? {
              connect: args.data.department,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Hospital)
  async updateHospital(
    @graphql.Args() args: UpdateHospitalArgs
  ): Promise<Hospital | null> {
    try {
      return await this.service.updateHospital({
        ...args,
        data: {
          ...args.data,

          department: args.data.department
            ? {
                connect: args.data.department,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hospital)
  async deleteHospital(
    @graphql.Args() args: DeleteHospitalArgs
  ): Promise<Hospital | null> {
    try {
      return await this.service.deleteHospital(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Department], { name: "departments" })
  async findDepartments(
    @graphql.Parent() parent: Hospital,
    @graphql.Args() args: DepartmentFindManyArgs
  ): Promise<Department[]> {
    const results = await this.service.findDepartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Department, {
    nullable: true,
    name: "department",
  })
  async getDepartment(
    @graphql.Parent() parent: Hospital
  ): Promise<Department | null> {
    const result = await this.service.getDepartment(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
