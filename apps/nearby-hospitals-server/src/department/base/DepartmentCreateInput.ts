/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { DoctorWhereUniqueInput } from "../../doctor/base/DoctorWhereUniqueInput";
import { ValidateNested, IsOptional, IsString } from "class-validator";
import { Type } from "class-transformer";
import { DoctorCreateNestedManyWithoutDepartmentsInput } from "./DoctorCreateNestedManyWithoutDepartmentsInput";
import { HospitalWhereUniqueInput } from "../../hospital/base/HospitalWhereUniqueInput";
import { HospitalCreateNestedManyWithoutDepartmentsInput } from "./HospitalCreateNestedManyWithoutDepartmentsInput";

@InputType()
class DepartmentCreateInput {
  @ApiProperty({
    required: false,
    type: () => DoctorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DoctorWhereUniqueInput)
  @IsOptional()
  @Field(() => DoctorWhereUniqueInput, {
    nullable: true,
  })
  doctor?: DoctorWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => DoctorCreateNestedManyWithoutDepartmentsInput,
  })
  @ValidateNested()
  @Type(() => DoctorCreateNestedManyWithoutDepartmentsInput)
  @IsOptional()
  @Field(() => DoctorCreateNestedManyWithoutDepartmentsInput, {
    nullable: true,
  })
  doctors?: DoctorCreateNestedManyWithoutDepartmentsInput;

  @ApiProperty({
    required: false,
    type: () => HospitalWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => HospitalWhereUniqueInput)
  @IsOptional()
  @Field(() => HospitalWhereUniqueInput, {
    nullable: true,
  })
  hospital?: HospitalWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => HospitalCreateNestedManyWithoutDepartmentsInput,
  })
  @ValidateNested()
  @Type(() => HospitalCreateNestedManyWithoutDepartmentsInput)
  @IsOptional()
  @Field(() => HospitalCreateNestedManyWithoutDepartmentsInput, {
    nullable: true,
  })
  hospitals?: HospitalCreateNestedManyWithoutDepartmentsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string | null;
}

export { DepartmentCreateInput as DepartmentCreateInput };
